'use strict';

module.exports = function(Vmlab) {
    Vmlab.getVM = function (req, callback) {
        try {
            if (typeof req.currentUser === 'undefined') {
                throw new Error('ID is missing');
            }
            console.log("userId", req.currentUser);
            Vmlab.find({ where: { userId: req.currentUser } },
                {
                    include: {
                        relation: "user" // include the owner object 
                    }
                }
                , function (err, data) {
                    if (err) {
                        callback(null, err)
                    } else {
                        callback(null, data);
                    }
                });

        }
        catch (e) {
            console.error('Error: ', e);
            if (e instanceof ERR_ASSERTION
                || e instanceof RangeError
                || e instanceof ReferenceError
                || e instanceof SyntaxError
                || e instanceof SystemError
                || e instanceof TypeError) {
                return callback('Something bad happened!');
            } else {
                return callback(e.message);
            }
        }
    }
    Vmlab.remoteMethod("getVM", {
        http: { path: '/getVM', verb: 'get' },
        'accepts': [
            { "arg": 'req', "type": 'object', "http": { "source": 'req' } }
        ],
        returns: { arg: 'data', type: 'array' }
    });


    /**************************************************
    * @purpose api for updateNotes
    * @param {object} data
    * @retrun {function} cb
    **************************************************/
   Vmlab.updateVm = function (data, req, cb) {
    try {
        if (typeof req.currentUser === 'undefined') {
            throw new Error('ID is missing');
        }
        if (typeof data.vmId === 'undefined') {
            throw new Error('Action is undefined');
        }
        if (typeof data.vmlabName === 'undefined') {
            throw new Error("noteId is missing")
        }
        if (typeof data.vmPaltform === 'undefined') {
            throw new Error("noteId is missing")
        }
        var info = {
            'vmId': data.vmId,
            'vmlabName': data.vmlabName,
            'vmPaltform': data.vmPaltform
        }
        if (req.currentUser != null && data.vmId === null && data.vmlabName === null) {


            console.log("Enter details is not valid");
            return cb(null, "Enter details is not valid")
        }
        else {
            Vmlab.updateAll({ _id: info.vmId }, { vmlabName: info.vmlabName, vmPaltform: info.vmPaltform }, function (err, data) {
                if (err) {
                    return cb(err)

                } else {

                    return cb(null, data);
                }
            });
        }
    } catch (e) {

    }
}

Vmlab.remoteMethod('updateVm', {
    http: {
        path: '/updateVm',
        verb: 'post'
    },
    'accepts': [

        { arg: 'data', type: 'object', http: { source: 'body' }, "description": 'JSON object in body ', "required": true },
        { "arg": 'req', "type": 'object', "http": { "source": 'req' } }

    ],
    returns: {
        arg: 'result',
        type: 'string'
    }
});

};
